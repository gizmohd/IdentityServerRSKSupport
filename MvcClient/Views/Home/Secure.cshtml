@using Microsoft.AspNetCore.Authentication;
@{
  ViewData["Title"] = "Secure";
}
<h2>@ViewData["Title"]</h2>

<h3>User claims</h3>

<div>
  <a asp-action="CallApiUsingUserAccessToken">Call API using user token</a>
</div>
<div>
  <a asp-action="CallApiAddressSearch">Call PTV API using user token</a>
</div>
<div>
  <a asp-action="CallWCFEndpoint">Call WCF Endpoint</a>
</div>
<div>
  <a asp-action="CallSearchAvailableLoads">Call Available Loads</a>
</div>
<div>
  <a asp-action="CallApiGetStates">Call Get States Proxied Api</a>
</div>
<div>
  <a asp-action="CallGetUserInfo">Call Identity Server User Info</a>
</div>
<div>
  <a asp-action="CallIdentityApi">Call Identity Server Api</a>
</div>
<dl>

  @foreach (var claim in User.Claims)
  {

    <dt>Name: @claim.Type</dt>
    <dd>Value: @claim.Value</dd>

    @*<dd>Subject: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(claim.Subject, new Newtonsoft.Json.JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore }))</dd>*@

  }
  <dt>access token</dt>
  <dd>@await ViewContext.HttpContext.GetTokenAsync("access_token")</dd>

  <dt>refresh token</dt>
  <dd>@await ViewContext.HttpContext.GetTokenAsync("refresh_token")</dd>
</dl>

@*<dl>
    <dt>Json Serialized User Claims</dt>
    <dd>
      @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(User.Claims, Newtonsoft.Json.Formatting.Indented, new Newtonsoft.Json.JsonSerializerSettings() { ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore }))
    </dd>
  </dl>*@